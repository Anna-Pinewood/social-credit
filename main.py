import datetime
import telebot
import sqlite3
from telebot import types

# –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω
TELEGRAM_TOKEN = "6389468643:AAEDBmG6fSwSoFflAgtjZhVpmC6FN9axGJ4"
bot = telebot.TeleBot(TELEGRAM_TOKEN)

# –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
names = ['–ú–∞–∫—Å', '–û–ª—è', '–ù–∏–∫–∏—Ç–∞']
# –û–ø—Ü–∏–∏ —Ä–µ–∞–∫—Ü–∏–π
options = {'like': 'üëç', 'dislike': 'üëé'}
# –°–ª–æ–≤–∞—Ä—å —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states = {}


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def create_table():
    conn = sqlite3.connect('reactions.db')
    c = conn.cursor()
    c.execute('''CREATE TABLE IF NOT EXISTS reactions 
                 (user_id INTEGER, person TEXT, reaction TEXT, comment TEXT, timestamp TEXT)''')
    conn.commit()
    conn.close()


create_table()


@bot.message_handler(commands=['help'])
def help_message(message):
    help_text = "–î–æ—Å—Ç—É–ø–Ω—ã –¥–≤–∞ —Å—Ü–µ–Ω–∞—Ä–∏—è: –æ—Ü–µ–Ω–∫–∞ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞. –î–ª—è –∑–∞–ø—É—Å–∫–∞ –ª—é–±–æ–≥–æ –∏–∑ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ —Å–Ω–∞—á–∞–ª–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ –∫–æ–º–∞–Ω–¥—É /start."
    bot.send_message(message.chat.id, help_text)


@bot.message_handler(commands=['start'])
def start_message(message):
    keyboard = types.InlineKeyboardMarkup()
    key_yes = types.InlineKeyboardButton(
        text='–û—Ç—Ä–µ–∞–≥–∏—Ä–æ–≤–∞—Ç—å', callback_data='react')
    keyboard.add(key_yes)
    key_no = types.InlineKeyboardButton(text='–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data='no')
    keyboard.add(key_no)
    question = "–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?"
    bot.send_message(message.from_user.id, text=question,
                     reply_markup=keyboard)


@bot.callback_query_handler(func=lambda call: True)
def callback_handler(call):
    if call.data == "react":
        user_states[call.from_user.id] = "reaction"
        keyboard = types.InlineKeyboardMarkup(row_width=2)
        buttons = [types.InlineKeyboardButton(
            name, callback_data=name) for name in names]
        keyboard.add(*buttons)
        bot.send_message(
            call.message.chat.id, "–ö–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ü–µ–Ω–∏—Ç—å?", reply_markup=keyboard)

    elif call.data in names and user_states.get(call.from_user.id) == "reaction":
        user_states[call.from_user.id] = "reaction_result"
        user_states['target_user'] = call.data
        bot.send_message(call.message.chat.id,
                         f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –æ—Ü–µ–Ω–∏—Ç—å {call.data}")

        keyboard = types.InlineKeyboardMarkup(row_width=2)
        buttons = [types.InlineKeyboardButton(
            symbol, callback_data=option) for option, symbol in options.items()]
        keyboard.add(*buttons)
        bot.send_message(
            call.message.chat.id, "–ö–∞–∫ –≤—ã –æ—Ü–µ–Ω–∏–≤–∞–µ—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è?", reply_markup=keyboard)

    elif call.data in options and user_states.get(call.from_user.id) == "reaction_result":
        user_states[call.from_user.id] = "comment"
        bot.send_message(call.message.chat.id, f"–í—ã –ø–æ—Å—Ç–∞–≤–∏–ª–∏ {call.data}")
        user_states['reaction'] = call.data
        keyboard = types.InlineKeyboardMarkup(row_width=2)
        skip_button = types.InlineKeyboardButton(
            "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data='skip')
        keyboard.add(skip_button)
        bot.send_message(call.message.chat.id, "–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å",
                         reply_markup=keyboard)

    elif call.data == "skip" and user_states.get(call.from_user.id) == "comment":
        bot.send_message(call.message.chat.id, "–í—ã –ø—Ä–æ–ø—É—Å—Ç–∏–ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π.")
        user_id = call.from_user.id
        person = user_states['target_user']
        reaction = user_states['reaction']
        comment = None
        timestamp = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        write_to_db(user_id, person, reaction, comment, timestamp)
        bot.send_message(call.message.chat.id, f"–ó–∞–ø–∏—Å–∞–Ω–æ.")
        user_states[call.from_user.id] = None
        bot.send_message(call.message.chat.id,
                         f"–î–ª—è –Ω–æ–≤–æ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /start.")

    elif call.data == "no":
        # –í—ã–≤–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        conn = sqlite3.connect('reactions.db')
        c = conn.cursor()
        c.execute("SELECT person, SUM(CASE WHEN reaction='like' THEN 1 ELSE 0 END) AS likes, SUM(CASE WHEN reaction='dislike' THEN 1 ELSE 0 END) AS dislikes FROM reactions GROUP BY person")
        rows = c.fetchall()
        stat_message = "\n".join(
            [f"{row[0]}: {row[1]} likes, {row[2]} dislikes" for row in rows])
        print(stat_message)
        if stat_message == "":
            bot.send_message(call.message.chat.id, '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—É—Å—Ç–∞.')
        else:
            bot.send_message(call.message.chat.id, stat_message)
        conn.close()
        bot.send_message(call.message.chat.id,
                         f"–î–ª—è –Ω–æ–≤–æ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /start.")


@bot.message_handler(content_types=['text'])
def handle_text(message):
    if user_states.get(message.from_user.id) == "comment":

        bot.send_message(message.chat.id,
                         f"–í–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {message.text}.")
        # –ó–∞–ø–∏—Å—å –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö

        user_id = message.from_user.id
        person = user_states['target_user']
        reaction = user_states['reaction']
        comment = message.text if message.text != "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å" else None
        timestamp = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        write_to_db(user_id, person, reaction, comment, timestamp)

        bot.send_message(
            message.chat.id, f"–ó–∞–ø–∏—Å–∞–Ω–æ.")
        # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
        user_states[message.from_user.id] = None
        bot.send_message(user_id,
                         f"–î–ª—è –Ω–æ–≤–æ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /start.")


def write_to_db(user_id, person, reaction, comment, timestamp):
    conn = sqlite3.connect('reactions.db')
    c = conn.cursor()
    print(user_id, person, reaction, comment, timestamp)
    c.execute("INSERT INTO reactions (user_id, person, reaction, comment, timestamp) VALUES (?, ?, ?, ?, ?)",
              (user_id, person, reaction, comment, timestamp))
    conn.commit()
    conn.close()


@bot.message_handler(func=lambda message: True)
def handle_message(message):
    if message.from_user.id not in user_states:
        bot.send_message(
            message.chat.id, "–î–æ—Å—Ç—É–ø–Ω—ã –¥–≤–∞ —Å—Ü–µ–Ω–∞—Ä–∏—è: –æ—Ü–µ–Ω–∫–∞ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞. –î–ª—è –∑–∞–ø—É—Å–∫–∞ –ª—é–±–æ–≥–æ –∏–∑ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ —Å–Ω–∞—á–∞–ª–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ –∫–æ–º–∞–Ω–¥—É /start.")


bot.polling(none_stop=True, interval=0)
